import os
import pandas as pd
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import GRU, Dense
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt
import streamlit as st
from io import BytesIO

def forecast_with_gru(df: pd.DataFrame, keyword: str) -> pd.DataFrame:
    """
    –û–±—É—á–∞–≤–∞ GRU –º–æ–¥–µ–ª –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–∞ —Å–ª–µ–¥–≤–∞—â–∏—Ç–µ 6 –º–µ—Å–µ—Ü–∞.
    –ü—Ä–∏–µ–º–∞ DataFrame —Å –∫–æ–ª–æ–Ω–∞ 'date' –∏ –∫–æ–ª–æ–Ω–∞ —Å –∫–ª—é—á–æ–≤–∞—Ç–∞ –¥—É–º–∞.
    –í—Ä—ä—â–∞ DataFrame —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–Ω–∞ —á–∞—Å—Ç.
    """
    if keyword not in df.columns:
        keyword = df.columns[-1]  # –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –ø–æ—Å–ª–µ–¥–Ω–∞—Ç–∞ –∫–æ–ª–æ–Ω–∞, –∞–∫–æ –Ω—è–º–∞ —Å—ä–≤–ø–∞–¥–µ–Ω–∏–µ

    series = df[["date", keyword]].dropna().copy()
    series.set_index("date", inplace=True)
    values = series.values

    # –°–∫–∞–ª–∏—Ä–∞–Ω–µ
    scaler = MinMaxScaler()
    scaled_values = scaler.fit_transform(values)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–æ—Å—Ç–∏
    X, y = [], []
    n_input = 30
    for i in range(n_input, len(scaled_values)):
        X.append(scaled_values[i - n_input:i, 0])
        y.append(scaled_values[i, 0])
    X, y = np.array(X), np.array(y)
    X = X.reshape((X.shape[0], X.shape[1], 1))

    # –ú–æ–¥–µ–ª
    model = Sequential([
        GRU(64, return_sequences=False, input_shape=(n_input, 1)),
        Dense(1)
    ])
    model.compile(optimizer="adam", loss="mse")
    model.fit(X, y, epochs=30, verbose=0)

    # –ü—Ä–æ–≥–Ω–æ–∑–∞
    forecast = []
    input_seq = scaled_values[-n_input:].reshape(1, n_input, 1)
    for _ in range(180):  # 6 –º–µ—Å–µ—Ü–∞ –Ω–∞–ø—Ä–µ–¥
        pred = model.predict(input_seq, verbose=0)[0, 0]
        forecast.append(pred)
        input_seq = np.append(input_seq[:, 1:, :], [[[pred]]], axis=1)

    forecast = scaler.inverse_transform(np.array(forecast).reshape(-1, 1)).flatten()
    last_date = series.index[-1]
    forecast_dates = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=180)

    forecast_df = pd.DataFrame({"date": forecast_dates, "forecast": forecast})

    # –û–±–µ–¥–∏–Ω—è–≤–∞–Ω–µ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ç–µ –¥–∞–Ω–Ω–∏ –∑–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    history_df = series.reset_index()
    history_df.columns = ["date", "value"]
    forecast_df.columns = ["date", "value"]
    forecast_df["type"] = "Forecast"
    history_df["type"] = "History"

    combined = pd.concat([history_df, forecast_df])
    return combined

def export_forecast_to_csv(df: pd.DataFrame, filename="forecast.csv"):
    """–ü–æ–∑–≤–æ–ª—è–≤–∞ export –∫—ä–º CSV —Ñ–∞–π–ª —á—Ä–µ–∑ Streamlit."""
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="üì• Download forecast as CSV",
        data=csv,
        file_name=filename,
        mime='text/csv'
    )
